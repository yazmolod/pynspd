import asyncio
from functools import partial

from jinja2 import Template

from pynspd import AsyncNspd
from pynspd._async.api import retry_on_http_error
from pynspd.schemas.layer_configs import Card, CardField, LayerNode, LayersTree

CLIENT = AsyncNspd()
request = partial(retry_on_http_error(AsyncNspd.request), CLIENT)


TYPES_TEMPLATE = """# autogenerated
from typing import Literal


LayerTitle = Literal[
    {%- for layer in layers %}
    "{{ layer.title }}",
    {%- endfor %}
]
"""

SCHEMAS_TEMPLATE = """# autogenerated
from typing import Union, Annotated, Optional, override
from datetime import date

from pydantic import Field

from pynspd.schemas.geometries import Point, LineString, Polygon, MultiPolygon
from pynspd.schemas.layer_configs import LayerNode
from pynspd.schemas.base_feature import BaseFeature
from pynspd.schemas.properties import NspdProperties, OptionProperties


{% for category_id, fields in layers_fields.items() %}
class Options{{ category_id }}(OptionProperties): {% if fields|length == 0 %}...{% endif %}
    {%- for field in fields %}
    {{ field.key_value }}: Optional[{{field.key_type}}] = None
    \"\"\"{{field.key_name}}{% if field.postfix != None %} ({{ field.postfix }}){% endif %}\"\"\"
    {%- endfor %}
{% endfor %}


{% for layer in layers %}
class Layer{{ layer.layer_id }}Feature(BaseFeature[
    {%- if layer.geometry_type == 'Polygon' %}
    Union[MultiPolygon, Polygon, Point],
    {% else %}
    {{ layer.geometry_type }},
    {% endif -%}
    NspdProperties[Options{{ layer.category_id }}]
]):
    \"\"\"{{ layer.title }}\"\"\"
    layer_meta = LayerNode.model_validate({{ layer.model_dump(by_alias=True) }})
{% endfor %}
"""

OVERLOAD_TEMPLATE = """{%- for layer in layers %}
    @overload
    @classmethod
    def by_title(cls, title: Literal["{{ layer.title }}"]) -> Type[auto.Layer{{ layer.layer_id }}Feature]: ...
{% endfor %}
    @overload
    @classmethod
    def by_title(cls, title: Any) -> NoReturn: ...
"""


def generate_files(layers: list[LayerNode], layers_fields: dict[int, Card]):
    output = Template(SCHEMAS_TEMPLATE).render(
        layers=layers, layers_fields=layers_fields
    )
    with open("src/pynspd/schemas/_autogen_features.py", "w", encoding="utf-8") as file:
        file.write(output)

    output = Template(TYPES_TEMPLATE).render(layers=layers)
    with open("src/pynspd/types/_autogen_layers.py", "w", encoding="utf-8") as file:
        file.write(output)

    output = Template(OVERLOAD_TEMPLATE).render(layers=layers)
    lines = []
    with open("src/pynspd/schemas/feature.py", "r", encoding="utf-8") as from_file:
        for line in from_file:
            lines.append(line)
    with open("src/pynspd/schemas/feature.py", "w", encoding="utf-8") as to_file:
        write_flag = True
        for line in lines:
            if "# END_AUTOGEN" in line:
                write_flag = True
            if write_flag:
                to_file.write(line)
            if "# START_AUTOGEN" in line:
                write_flag = False
                to_file.write(output)
                to_file.write("\n\n")


async def get_layer_tree() -> LayersTree:
    r = await request(
        "get", "/api/geoportal/v1/layers-theme-tree", params={"themeId": 1}
    )
    tree = LayersTree.model_validate(r.json())
    return tree


async def get_category_card(category_id: int) -> tuple[int, list[CardField]]:
    r = await request(
        "get", f"/api/geoportal/v1/geom-card-display-settings/{category_id}"
    )
    card = Card.model_validate(r.json())
    fields = []
    for field in card.card:
        if field.key_value == "-":
            continue
        if field.key_value == "":
            continue
        if not field.key_value.isascii():
            continue
        if " " in field.key_value:
            continue
        fields.append(field)
    return category_id, fields


async def get_layers_fields(layers: list[LayerNode]) -> dict[int, list[CardField]]:
    layers_fields = {}
    categories = list(set([i.category_id for i in layers]))
    result = await asyncio.gather(*[get_category_card(i) for i in categories])
    layers_fields = dict(result)
    return layers_fields


async def main():
    tree = await get_layer_tree()
    layers = tree.layers
    layers_fields = await get_layers_fields(layers)
    generate_files(layers, layers_fields)


if __name__ == "__main__":
    asyncio.run(main())
